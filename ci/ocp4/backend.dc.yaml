---
kind: Template
apiVersion: template.openshift.io/v1
message: A new Baserow backend application has been created in your project
metadata:
  name: bcgov-baserow-backend-dc
parameters:
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: ImageStream Namespace
    name: IS_NAMESPACE
    value: "acf456-tools"
  # - description: The OpenShift ImageStream name.
  #   displayName: Image Stream
  #   name: IS_NAME
  #   value: baserow-bcgov
  - description: Version of BaseRow app to be used (e.g. 1.13.0).
    displayName: Version of BaseRow
    name: BASEROW_TAG
    value: "1.13.2"    
  - description: The short-name of the Survey Service, lower-case with hyphen.
    displayName: BaseRow Acronym
    name: APP_NAME
    required: true
    value: test
  - name: CPU_LIMIT
    value: "200m"
  - name: MEMORY_LIMIT
    value: "512Mi"
  - name: CPU_REQUEST
    value: "50m"
  - name: MEMORY_REQUEST
    value: "200Mi"
objects:
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${APP_NAME}-baserow-backend-dc"
      generation: 1
      labels:
        app: "${APP_NAME}-baserow"
      annotations: {}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
        activeDeadlineSeconds: 21600
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "${APP_NAME}-baserow-backend"
            from:
              kind: ImageStreamTag
              namespace: ${IS_NAMESPACE}
              name: bcgov-baserow-backend:${BASEROW_TAG}
      replicas: 1
      revisionHistoryLimit: 10
      test: false
      selector:
        app: "${APP_NAME}-baserow"
        deploymentconfig: "${APP_NAME}-baserow-backend"
      template:
        metadata:
          labels:
            app: "${APP_NAME}-baserow"
            deploymentconfig: "${APP_NAME}-baserow-backend"
          annotations: {}
        spec:
          containers:
            - name: "${APP_NAME}-baserow-backend"
              image: " "
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 8443
                  protocol: TCP
              env:
                - name: DATABASE_USER
                  valueFrom:
                    secretKeyRef:
                      name: "${APP_NAME}-baserow-postgresql"
                      key: database-user
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: "${APP_NAME}-baserow-postgresql"
                      key: database-password
                - name: DATABASE_NAME
                  valueFrom:
                    secretKeyRef:
                      name: "${APP_NAME}-baserow-postgresql"
                      key: database-name
                - name: DATABASE_HOST
                  value: "${APP_NAME}-baserow-postgresql"
                - name: DATABASE_PORT
                  value: "5432"
                # - name: DATABASE_URL
                #   value: postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)
                - name: BASEROW_PUBLIC_URL
                  value: "https://${APP_NAME}-baserow-url"
              resources:
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
              livenessProbe:
                httpGet:
                  path: "/"
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
                timeoutSeconds: 5
                periodSeconds: 30
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: "/"
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
                periodSeconds: 30
                successThreshold: 1
                failureThreshold: 10
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
